// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package api

import (
	"errors"
	"fmt"
)

const (
	// EnvLocal is a Env of type local.
	EnvLocal Env = "local"
	// EnvDevelopment is a Env of type development.
	EnvDevelopment Env = "development"
	// EnvProduction is a Env of type production.
	EnvProduction Env = "production"
)

var ErrInvalidEnv = errors.New("not a valid Env")

// String implements the Stringer interface.
func (x Env) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Env) IsValid() bool {
	_, err := ParseEnv(string(x))
	return err == nil
}

var _EnvValue = map[string]Env{
	"local":       EnvLocal,
	"development": EnvDevelopment,
	"production":  EnvProduction,
}

// ParseEnv attempts to convert a string to a Env.
func ParseEnv(name string) (Env, error) {
	if x, ok := _EnvValue[name]; ok {
		return x, nil
	}
	return Env(""), fmt.Errorf("%s is %w", name, ErrInvalidEnv)
}
